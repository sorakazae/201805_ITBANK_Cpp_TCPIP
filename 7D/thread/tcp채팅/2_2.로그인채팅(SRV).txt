#pragma comment(lib, "ws2_32.lib")
#include <winsock2.h>
#include <stdio.h>
struct userInfo{
	char userID[20];
	char userPW[20];
	int num;
};
void auth(SOCKET CLTS);
SOCKET totSock[256];
int sockCnt=0;
DWORD __stdcall func(LPVOID arg);
SOCKADDR_IN CLTaddr;


char* host_ip(){
	struct hostent * hp;
	char host[1024];
	char ip_[100]={0};
	gethostname(host,sizeof(host));
	hp = gethostbyname(host);
	printf("hp->h_addr_list[0] = %s\n",inet_ntoa(*(struct in_addr*)hp->h_addr_list[0]));
	sprintf(ip_,"%s",inet_ntoa(*(struct in_addr*)hp->h_addr_list[0]));
	
	return ip_;
}


int main(){
	WSADATA wsa;
	
	/* 윈속 dll 로드*/ 
	WSAStartup( MAKEWORD(2,2) ,&wsa);
	
	/* 소켓 생성*/
	SOCKET s;
	s = socket(AF_INET, SOCK_STREAM,0);
	if(s == INVALID_SOCKET){
		printf("socket error!\n");
		return -1;
	}
	
	char ip_[100]={0};
	strcpy(ip_,host_ip());

	/*주소 결합*/
	SOCKADDR_IN SRVaddr;
	memset(&SRVaddr, 0, sizeof(SRVaddr));
	
	SRVaddr.sin_family = AF_INET;
	SRVaddr.sin_port = htons(12345);
	SRVaddr.sin_addr.s_addr = inet_addr(ip_);
	
	int errch = 0;
	errch = bind(s, (SOCKADDR*)&SRVaddr, sizeof(SRVaddr));
	if(errch == SOCKET_ERROR){
		printf("bind error!\n");
		return -1;
	}
	
	/*포트 오픈*/
	errch = listen(s,SOMAXCONN);
	if(errch == SOCKET_ERROR){
		printf("listen error!\n");
		return -1;
	}
	
	/*연결 허용*/
	SOCKET CLTs;
	int size = sizeof(CLTaddr);
	HANDLE hThread;
	
	while(1){
		CLTs = accept(s, (SOCKADDR * )&CLTaddr, &size);
		if(CLTs == INVALID_SOCKET){
			printf("accept error!\n");
			return -1;
		}
		
		totSock[sockCnt++] = CLTs;
		hThread = CreateThread(NULL, 0, func, (LPVOID)&CLTs, 0, NULL);	
	}
	
	/*소켓 종료 및 dll 언로드*/
	closesocket(CLTs);
	closesocket(s);
	WSACleanup();
	return 0;
}

DWORD __stdcall func(LPVOID arg)
{
	SOCKET CLTS = *( (SOCKET *)arg);
	int recvlen = 0, i;
	char recvbuf[1460];
	memset(recvbuf,0,sizeof(recvbuf));
	
	auth(CLTS);
	
	while(1){
		recvlen = recv(CLTS, recvbuf, sizeof(recvbuf),0);
		
		if(recvlen == 0)
			break;
		
		for(i=0; i<sockCnt; i++)
			send(totSock[i], recvbuf, recvlen,0);
		
		memset(recvbuf,0,sizeof(recvbuf));
	}
	
	return 0;
}
void auth(SOCKET CLTS){
	char userid[20]="DKFTNDJQTDMA";
	char userpw[20]="AHSWLDJeJRGODKFDK";
	struct userInfo user={0};
	int num;
	while(1){
		recv(CLTS,(char*)&user,sizeof(user),0);
		
		if(user.num == 1){
			if(!strcmp(user.userID,userid)){
				if(!strcmp(user.userPW,userpw)){
					user.num=0;
					send(CLTS,(char*)&user,sizeof(user),0);
					return ;
				}else{
					user.num=1;
					send(CLTS,(char*)&user,sizeof(user),0);
				}
			}else{
				user.num = -1;
				send(CLTS,(char*)&user,sizeof(user),0);
			}
		}else if(user.num==2){
			strcpy(userid,user.userID);
			strcpy(userpw,user.userPW);
		}
	}
}